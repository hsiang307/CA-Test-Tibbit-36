'***********************************************************************************************************
'			Tibbit #36 (3-axis accelerometer)
'***********************************************************************************************************
include "global.tbh"

'--------------------------------------------------------------------
const TBT36_INIT_SIGNATURE=&h1590
const TBT36_STAMP="TBT36> "
const TBT36_CR_LF=chr(13)+chr(10)

const TBT36_WRITE_ADDR			=&hA6			' Write Addr
const TBT36_READ_CODE 			=&hA7			' Read Addr

const TBT36_DEVID				=&hE5

const TBT36_REG_DEVID			=&h00
const TBT36_REG_THRESH_TAP		=&h1d
const TBT36_REG_OFS_X			=&h1E
const TBT36_REG_OFS_Y			=&h1F
const TBT36_REG_OFS_Z			=&h20
const TBT36_REG_DUR				=&h21
const TBT36_REG_LATENT			=&h22
const TBT36_REG_WINDOW			=&h23
const TBT36_REG_THRESH_ACT		=&h24
const TBT36_REG_THRESH_INACT	=&h25
const TBT36_REG_TIME_INCAT		=&h26
const TBT36_REG_ACT_INACT_CTL	=&h27
const TBT36_REG_THRESH_FF		=&h28
const TBT36_REG_TIME_FF			=&h29
const TBT36_REG_TAP_AXES		=&h30
const TBT36_REG_ACT_TAPSTATUS	=&h2B
const TBT36_REG_BW_RATE			=&h2C
const TBT36_REG_POWER_CTL		=&h2D
const TBT36_REG_INT_ENABLE		=&h2E
const TBT36_REG_INT_MAP			=&h2F
const TBT36_REG_INT_SOURCE		=&h30
const TBT36_REG_DATA_FORMAT		=&h31
const TBT36_REG_DATA_X0			=&h32
const TBT36_REG_DATA_X1			=&h33
const TBT36_REG_DATA_Y0			=&h34
const TBT36_REG_DATA_Y1			=&h35
const TBT36_REG_DATA_Z0			=&h36
const TBT36_REG_DATA_Z1			=&h37
const TBT36_REG_FIFO_CTL		=&h38
const TBT36_REG_FIFO_STATUS		=&h39
const TBT36_REG_TA_SIGN			=&h3A
const TBT36_REG_ORIENT_CONF		=&h3B
const TBT36_REG_ORIENT			=&h3C

declare sub tbt36_write_reg(cmd as byte, data as byte)
declare function tbt36_get_reg(cmd as byte) as byte
declare sub tbt36_delay_msecond(value as word)

#if TBT36_DEBUG_PRINT=1
	declare sub adxl_debug_print(data as string)
#endif

dim format as byte
dim i2c_num_tbt36 as byte
dim tbt36_init_flag as word

'==============================================================================
function tbt36_init(use_ssi as no_yes)as ok_ng
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.
	
	#if TBT36_DEBUG_PRINT=1
		adxl_debug_print("++++++++++")
	#endif
	tbt36_init=OK
	tbt36_init_flag=TBT36_INIT_SIGNATURE

	i2c_num_tbt36=si2c_register("TBT36", TBT36_DATA_PIN, TBT36_CLK_PIN,use_ssi)

	if i2c_num_tbt36<4 then
		ssi.channel=i2c_num_tbt36
		ssi.enabled=NO
		#IF PLATFORM_ID=TPP2WG2 or PLATFORM_ID=TPP3WG2
			ssi.baudrate=15
		#elif PLATFORM_ID=TPP2W or PLATFORM_ID=TPP3W or PLATFORM_ID=TPP2N or PLATFORM_ID=TPP3N
			ssi.baudrate=10
		#endif
		ssi.clkmap=TBT36_CLK_PIN
		ssi.dimap=TBT36_DATA_PIN
		ssi.domap=TBT36_DATA_PIN
		ssi.direction=PL_SSI_DIRECTION_LEFT
		ssi.mode=PL_SSI_MODE_2
		ssi.zmode=PL_SSI_ZMODE_ENABLED_ON_ZERO
		ssi.enabled=YES
	else
		if use_ssi=YES then
			tbt36_init=NG
		end if
	end if

	si2c_get(i2c_num_tbt36)
	
	dim id as byte=&h00
	
	id=tbt36_get_reg(TBT36_REG_DEVID)

	if id<>TBT36_DEVID then
		tbt36_init=NG
		#if TBT36_DEBUG_PRINT=1
			adxl_debug_print("DEV ID ERR.")
		#endif
		goto leave
	end if

	format=&h00
	#if TBT_36_RESOLUTION=TBT_36_RESOLUTION_FULL
		format=format or &h08
	#endif

	#if TBT_36_RANGE=TBT_36_RANGE_1P5G
		format=format or &h00
	#elif TBT_36_RANGE=TBT_36_RANGE_3G
		format=format or &h01
	#elif TBT_36_RANGE=TBT_36_RANGE_6G
		format=format or &h02
	#else
		'when format= 12G mode ,it should be full resolution mode
		format=format or &h0B
	#endif
	'set resolution + range
	tbt36_write_reg(TBT36_REG_DATA_FORMAT,format)
	'set measure bit
	tbt36_write_reg(TBT36_REG_POWER_CTL,&h08)
	'set as bypass mode
	tbt36_write_reg(TBT36_REG_FIFO_CTL,&h80)
leave:
	#if TBT36_DEBUG_PRINT=1
		adxl_debug_print("----------")
	#endif
end function

sub tbt36_get_mg(byref x_value as integer, byref y_value as integer, byref z_value as integer)
'Returns three signed values expressing acceleration in mG.	
	dim lx,ly,lz as long
	
	tbt36_get(x_value,y_value,z_value)
	lx=x_value
	ly=y_value
	lz=z_value
	x_value=(lx*2930)/1000
	y_value=(ly*2930)/1000
	z_value=(lz*2930)/1000
end sub

sub tbt36_get(byref x_value as integer, byref y_value as integer, byref z_value as integer)
'Returns three signed values expressing the acceleration.
'The scale is -4096 (-12G) to +4095 (+12G).
'Use tbt36_get_mg() to obtain acceleration in mG units.
	
	dim hi_byte,lo_byte as byte
	'dim x_hi,x_lo,y_hi,y_lo,z_hi,z_lo as byte
	dim x,y,z as word

	if tbt36_init_flag<>TBT36_INIT_SIGNATURE then 
		#if TBT36_DEBUG_PRINT=1
			adxl_debug_print("The lib is not initialized, call tbt36_init() first")
		#endif
		exit sub
	end if

	si2c_get(i2c_num_tbt36)
	tbt36_write_reg(TBT36_REG_POWER_CTL,&h08)

	'Read X axis value
	hi_byte=tbt36_get_reg(TBT36_REG_DATA_X1)
	lo_byte=tbt36_get_reg(TBT36_REG_DATA_X0)
	x=hi_byte*256+lo_byte

	'Read Y axis value
	hi_byte=tbt36_get_reg(TBT36_REG_DATA_Y1)
	lo_byte=tbt36_get_reg(TBT36_REG_DATA_Y0)
	y=hi_byte*256+lo_byte

	'Read Z axis value
	hi_byte=tbt36_get_reg(TBT36_REG_DATA_Z1)
	lo_byte=tbt36_get_reg(TBT36_REG_DATA_Z0)
	z=hi_byte*256+lo_byte

	dim tmp as byte
	'In bypass mode, the overrun bit is set when new data replaces unread data in the DATAX, DATAY, and DATAZ registers.
	tmp=tbt36_get_reg(TBT36_REG_INT_ENABLE)
	tmp=tmp and &hFE
	tbt36_write_reg(TBT36_REG_INT_ENABLE,tmp)

	tbt36_write_reg(TBT36_REG_POWER_CTL,&h00)
	#if TBT36_DEBUG_PRINT=1
		adxl_debug_print(hex(x)+"/"+hex(y)+"/"+hex(z))
	#endif

	#if TBT_36_RESOLUTION=TBT_36_RESOLUTION_NOMAL
		#if TBT_36_RANGE <>TBT_36_RANGE_12G
			const SIGN_MASK=&hF000
			const DATA_MASK=&h03FF
		#else
			const SIGN_MASK=&hF000
			const DATA_MASK=&h0FFF
		#endif
	#else
		'This is full resolution mode
		#if TBT_36_RANGE=TBT_36_RANGE_1P5G
			const SIGN_MASK=&hF000
			const DATA_MASK=&h03FF
		#endif

		#if TBT_36_RANGE=TBT_36_RANGE_3G
			const SIGN_MASK=&hF000
			const DATA_MASK=&h07FF
		#endif

		#if TBT_36_RANGE=TBT_36_RANGE_6G
			const SIGN_MASK=&hF000
			const DATA_MASK=&h0FFF
		#endif

		#if TBT_36_RANGE=TBT_36_RANGE_12G
			const SIGN_MASK=&hE000
			const DATA_MASK=&h1FFF
		#endif
	#endif

	if x and SIGN_MASK then
		x= x and DATA_MASK
		x_value=DATA_MASK-x
		x_value=(-x_value)
	else
		x_value=x and DATA_MASK
	end if

	if y and SIGN_MASK then
		y= y and DATA_MASK
		y_value=DATA_MASK-y
		y_value=(-y_value)
	else
		y_value= y and DATA_MASK
	end if

	if z and SIGN_MASK then
		z= z and DATA_MASK
		z_value=DATA_MASK-z
		z_value=(-z_value)
	else
		z_value=z and DATA_MASK
	end if
end sub

sub tbt36_write_reg(cmd as byte, data as byte)
	si2c_start()

	si2c_write(TBT36_WRITE_ADDR)

	si2c_write(cmd)
	si2c_write(data)

	si2c_stop()	
end sub

function tbt36_get_reg(cmd as byte) as byte
	dim tmp as byte
	si2c_start()

	si2c_write(TBT36_WRITE_ADDR)
	si2c_write(cmd)

	si2c_start()

	si2c_write(TBT36_READ_CODE)
	tmp=si2c_read(false)

	si2c_stop()

	#if TBT36_DEBUG_PRINT=1
		adxl_debug_print("cmd:"+hex(cmd)+":"+hex(tmp))
	#endif
	tbt36_get_reg=tmp
end function

sub tbt36_delay_msecond(value as word)
	dim ax,bx as word

	for ax=0 to value
		for bx=0 to 5
		next bx
	next ax
end sub

#if TBT36_DEBUG_PRINT=1
sub adxl_debug_print(data as string)
	sys.debugprint(TBT36_STAMP+data+TBT36_CR_LF)
end sub
#endif
